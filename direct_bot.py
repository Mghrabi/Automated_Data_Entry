#!/usr/bin/env python3
"""
TJM Direct Data Entry Bot - No TextEdit Required
Creates files directly without using desktop applications
"""

import os
import time
import requests
import json
import platform
from pathlib import Path

class DirectDataEntryBot:
    def __init__(self):
        # Detect operating system for platform-specific behavior
        self.os_type = platform.system()
        print(f"🖥️  Detected OS: {self.os_type}")
        
        # Create project directory on desktop for saving files
        self.desktop_path = Path.home() / "Desktop"
        self.project_dir = self.desktop_path / "tjm-project"
        self.project_dir.mkdir(exist_ok=True)  # Create directory if it doesn't exist
        
        print(f"📁 Project directory: {self.project_dir}")
    
    def fetch_posts(self, limit=10):
        """Fetch blog posts from JSONPlaceholder API with error handling"""
        try:
            # API endpoint for fetching posts with limit
            url = f"https://jsonplaceholder.typicode.com/posts?_limit={limit}"
            response = requests.get(url, timeout=10)  # 10 second timeout
            response.raise_for_status()  # Raise exception for bad status codes
            return response.json()  # Return JSON data
        except requests.RequestException as e:
            print(f"❌ Error fetching posts: {e}")
            return []
    
    def format_post_content(self, post):
        """Format API post data as a structured blog post"""
        # Capitalize title for better presentation
        title = post['title'].title()
        # Replace single newlines with double newlines for better paragraph spacing
        body = post['body'].replace('\n', '\n\n')
        
        # Create formatted blog post content
        content = f"""BLOG POST #{post['id']}

TITLE: {title}

CONTENT:
{body}

---
Post ID: {post['id']}
User ID: {post['userId']}
Generated by TJM Automation Bot
Platform: {self.os_type}
Date: {time.strftime('%Y-%m-%d %H:%M:%S')}
"""
        return content
    
    def save_post_directly(self, post):
        """Save post content directly to file"""
        try:
            # Format the post content
            content = self.format_post_content(post)
            
            # Create filename
            filename = f"post {post['id']}.txt"
            file_path = self.project_dir / filename
            
            # Write content directly to file
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"✅ Successfully saved {filename}")
            return True
            
        except Exception as e:
            print(f"❌ Error saving post {post['id']}: {e}")
            return False
    
    def run_automation(self):
        """Main automation workflow that processes all posts"""
        print("🚀 Starting TJM Direct Automation Bot...")
        print("=" * 60)
        
        # Display information
        print("💡 Creating files directly without desktop applications")
        print("📝 This method avoids all save dialog and clipboard issues")
        
        # Fetch posts from JSONPlaceholder API
        print("🌐 Fetching posts from JSONPlaceholder API...")
        posts = self.fetch_posts(10)
        
        if not posts:
            print("❌ No posts retrieved. Exiting.")
            return
        
        print(f"📋 Retrieved {len(posts)} posts")
        print("=" * 60)
        
        # Process each post in sequence
        successful_posts = 0
        failed_posts = 0
        
        for i, post in enumerate(posts, 1):
            print(f"\n[{i}/10] Processing post {post['id']}...")
            print(f"📝 Title: {post['title'][:50]}...")
            
            if self.save_post_directly(post):
                successful_posts += 1
            else:
                failed_posts += 1
            
            # Small delay between posts
            time.sleep(0.5)
        
        # Display final summary
        print("\n" + "=" * 60)
        print("🎉 AUTOMATION COMPLETE")
        print(f"✅ Successful: {successful_posts} posts")
        print(f"❌ Failed: {failed_posts} posts")
        print(f"📁 Files saved to: {self.project_dir}")
        
        # List all created files
        if successful_posts > 0:
            print("\n📄 Created files:")
            for file in sorted(self.project_dir.glob("post *.txt")):
                print(f"  - {file.name}")
                
            # Show sample content
            print("\n📖 Sample content from first file:")
            try:
                sample_file = self.project_dir / "post 1.txt"
                if sample_file.exists():
                    with open(sample_file, 'r') as f:
                        content = f.read()
                        lines = content.split('\n')
                        for i, line in enumerate(lines[:10]):  # Show first 10 lines
                            print(f"   {line}")
                        if len(lines) > 10:
                            print("   ...")
            except Exception as e:
                print(f"   Error reading sample file: {e}")

def main():
    """Main function with comprehensive error handling"""
    try:
        # Display information
        print("🤖 TJM Direct Automation Bot Starting...")
        print("💡 This bot creates files directly without using desktop applications")
        print("📁 Files will be saved to ~/Desktop/tjm-project/")
        
        # Create and run the automation bot
        bot = DirectDataEntryBot()
        bot.run_automation()
        
    except KeyboardInterrupt:
        print("\n⏹️  Bot stopped by user")
    except Exception as e:
        print(f"💥 Unexpected error: {e}")
    finally:
        print("🏁 Bot terminated")

if __name__ == "__main__":
    main() 